#!/usr/bin/python26
#
# uespdeploy
#   by Dave Humphrey (dave@uesp.net), created on 5 Jan 2014
#
# A basic script for deploying software onto one or more servers on
# the UESP.net website.
#
# Run 'uespdeploy -h' to see basic help on command line options.
# By default it tries to load and rin the 'uesp.deploy' file in the
# current directory. Command line options will override data from the
# deployment data file.
#

import os
import socket
import datetime
import subprocess
from optparse import OptionParser
import sys
import MySQLdb as mdb
import getpass


#
# Constants
#
SECRETS_FILE = "/home/uesp/secrets/uespdeploy.secrets"
DEFAULT_DEPLOY = "uesp.deploy"
DEFAULT_SOURCEPATH = "./"
DEFAULT_BACKUPPATH = "/tmp/"
COMMENT_CHAR = '#'

DB_DATABASE = "uesp_deploy"
DB_TABLE = "deploylog"

    # The following will be set within the external secrets file loaded at run time
DB_USER = ""
DB_PASSWORD = ""
DB_SERVER = "content3.uesp.net"
DB_PORT = 3306

#
# Global variables
#
g_InputOptions = []
g_InputArgs = []
g_DeployParams = []
g_SourcePath = DEFAULT_SOURCEPATH
g_LastBackupPath = ""
g_RevisionNumber = ""
g_HostName = ""
g_DeployCount = 0
g_DB = None


def LoadSecrets():
    fp = open(SECRETS_FILE)
    secrets = fp.read()
    fp.close()
    exec(secrets) in globals()


def CreateDeployTable():
    if (GetVerboseLevel()): print "Creating table {0}.{1}".format(DB_DATABASE, DB_TABLE)
    
    HeaderStr = "CREATE TABLE {0}.{1} (".format(DB_DATABASE, DB_TABLE);
    TableDef = """
                id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
                username VARCHAR(64) NOT NULL,
                timestamp TIMESTAMP NOT NULL DEFAULT NOW(),
                appname VARCHAR(64) NOT NULL,
                options TEXT NOT NULL,
                source TEXT NOT NULL,
                destination TEXT NOT NULL,
                backuppath TEXT NOT NULL,
                deployfile TEXT NOT NULL,
                revision TEXT NOT NULL,
                error TEXT NOT NULL
                """
    QueryStr = HeaderStr + TableDef + ");"
    if (GetVerboseLevel() >= 2): print "\t{0}".format(QueryStr)
    g_DB.query(QueryStr)
    return True


def InitDatabase():
    global g_DB
    
    if (GetVerboseLevel()): print "Trying to connect to MySQL database {0} on {1}:{2} as {3}".format(DB_DATABASE, DB_SERVER, DB_PORT, DB_USER)
    g_DB = mdb.connect(host=DB_SERVER, user=DB_USER, passwd=DB_PASSWORD, db=DB_DATABASE, port=DB_PORT)
    
    QueryStr = "SELECT * FROM information_schema.tables WHERE table_schema='{0}' AND table_name='{1}' LIMIT 1;".format(DB_DATABASE, DB_TABLE)
    g_DB.query(QueryStr)
    Results = g_DB.store_result()
    
    if (Results.num_rows() <= 0): CreateDeployTable()

    return True


def CloseDatabase():
    if (g_DB): g_DB.close()
    return True


def GetRevisionNumber():
    global g_SourcePath
    
    os.chdir(os.path.abspath(g_SourcePath))
    
    Cmd = ["hg", "id", "--id", "-r ."]
    RevNum = subprocess.Popen(Cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0].rstrip()
    
    try:
        Test = int(RevNum, 16)
    except ValueError:
        RevNum = ""
    
    if (GetVerboseLevel()): print "Got '{0}' for the revision number".format(RevNum)
    return RevNum


def CompareSourceDestPaths(source, dest):
    SourceServer = ExtractServerName(source)
    DestServer   = ExtractServerName(dest)
    SourcePath   = ExtractFileName(source)
    DestPath     = ExtractFileName(dest)
    
    if (not SourceServer or SourceServer == "localhost" or SourceServer == "127.0.0.1"): 
        SourceServer = g_HostName
        SourcePath = os.path.abspath(SourcePath)
        
    if (not DestServer or DestServer == "localhost" or DestServer == "127.0.0.1"):
        DestServer = g_HostName
        DestPath = os.path.abspath(DestPath)

    if (not SourcePath.endswith("/")): SourcePath += "/"
    if (not DestPath.endswith("/")):   DestPath += "/"
    
    if (SourceServer.lower() != DestServer.lower()): return False
    if (SourcePath != DestPath): return False
    
    try:
        if (not os.path.samefile(SourcePath, DestPath)): return False
    except:
        return False
    
    if (GetVerboseLevel() > 1): print "\tCompareSourceDestPaths( {0}, {1} )".format(source, dest)
    return True


def DisplayError(destination, errormsg):
    print errormsg
    AddDeployLog(destination, errormsg)
    return False


def AddDeployLog(destination, error=""):
    OptionStr = g_DB.escape_string(', '.join('%s=%s' % (k,v) for k,v in vars(g_InputOptions).items()))
    SourcePath = g_DB.escape_string(os.path.abspath(g_SourcePath))
    DestPath = g_DB.escape_string(destination)
    
    if (not IsBackup()):
        BackupPath = ""
    else:
        BackupPath = g_DB.escape_string(os.path.abspath(g_LastBackupPath))
    
    with open (g_InputOptions.deployfile, "r") as myfile:
        DeployFile = g_DB.escape_string(myfile.read())
    
    HeaderStr = "INSERT INTO {0}.{1} (username, appname, options, source, destination, backuppath, error, deployfile, revision) ".format(DB_DATABASE, DB_TABLE)
    ValueStr = "VALUES ('{0}', '{1}', \"{2}\", '{3}', '{4}', '{5}', '{6}', '{7}', '{8}');".format(
                                                                                    g_DB.escape_string(getpass.getuser()),
                                                                                    g_DB.escape_string(GetDeployParamValue("name")),
                                                                                    OptionStr,
                                                                                    SourcePath,
                                                                                    DestPath,
                                                                                    BackupPath,
                                                                                    g_DB.escape_string(error),
                                                                                    DeployFile,
                                                                                    g_DB.escape_string(g_RevisionNumber)) 
    QueryStr = HeaderStr + ValueStr
    
    if (GetVerboseLevel() >= 2): print "\tAdding deploy log database row:\n\t\t{0}".format(QueryStr)
    
    g_DB.query(QueryStr)
    
    return True


def ParseInputArgs():
    parser = OptionParser()
    parser.add_option("-v", "--verbosity",  action="count",         dest="verbose",     help="increase output verbosity")
    parser.add_option("-s", "--source",     action="store",         dest="source",      help="path to the source being deployed (defaults to the current local directory)", type="string", default=DEFAULT_SOURCEPATH)
    parser.add_option("-d", "--destination",action="store",         dest="destination", help="destination path for the installation", type="string")
    parser.add_option("-f", "--file",       action="store",         dest="deployfile",  help="use the specified deployment file instead of uesp.deploy", type="string", default=DEFAULT_DEPLOY)
    parser.add_option("-H", "--hostname",   action="store",         dest="hostname",    help="manually specify the localhost's name", type="string")
    parser.add_option("-b", "--backup",     action="store_true",    dest="backup",      help="backup destination files to the tmp directory")
    parser.add_option("-B", "--backuppath", action="store",         dest="backuppath",  help="destination path for any backups") 
    parser.add_option("-l", "--localonly",  action="store_true",    dest="localonly",   help="only deploy to the localhost")
    parser.add_option("-S", "--serveronly", action="store",         dest="serveronly",  help="only deploy the specified server name")
    return parser.parse_args()


def GetDeployParamValue(Param):
    Result = GetDeployParam(Param)
    if (len(Result) == 0): return ""
    if (len(Result[0]) <= 1): return ""
   
    return Result[0][1]


def GetDeployParam(Param):
    global g_DeployParams
    tmpParam = Param.lower()
    
    Result = [item for item in g_DeployParams if item[0] == tmpParam]
    return Result


def GetHostName():
    global g_InputOptions
    if (g_InputOptions.hostname): return g_InputOptions.hostname;
    return socket.gethostname()


def GetVerboseLevel():
    global g_InputOptions
    
    if (g_InputOptions.verbose):
        return int(g_InputOptions.verbose)
    
    Verbose = GetDeployParamValue("verbosity")
    
    if (Verbose): 
        return int(Verbose)


def IsLocalOnly():
    global g_InputOptions
    if (g_InputOptions.localonly): return True
    return False


def IsServerOnly():
    global g_InputOptions
    if (g_InputOptions.serveronly): return True
    return False


def IsBackup():
    global g_InputOptions
    
    if (GetDeployParamValue("backup").lower() == "true"): return True
    if (g_InputOptions.backup): return True

    return False


def GetBackupPath():
    global g_InputOptions    
    BackupPath = g_InputOptions.backuppath;
    
    if (BackupPath):
        if (not BackupPath.endswith('/')): BackupPath += '/'
        return BackupPath
    
    BackupPath = GetDeployParamValue("backuppath")
    
    if (BackupPath):
        if (not BackupPath.endswith('/')): BackupPath += '/'
        return BackupPath
    
    return DEFAULT_BACKUPPATH


def GetSourcePath():
    SourcePath = g_InputOptions.source
    if (not SourcePath.endswith('/')): SourcePath += '/'
    return SourcePath


def ExtractServerName(path):
    TmpSplit = path.split(':', 1)
    if (len(TmpSplit) == 1): return "localhost";
    return TmpSplit[0]


def ExtractFileName(path):
    TmpSplit = path.split(':', 1)
    if (len(TmpSplit) == 1): return TmpSplit[0];
    return TmpSplit[1]


def LoadDeployFile(filename):
    global g_DeployParams
    print "Loading deploy file '{0}'...".format(filename)

    f = open(filename)
    lines = f.readlines()
    f.close()

    for line in lines:
        newline = line.split(COMMENT_CHAR)[0].strip()
        if (not newline): continue
        
        variable, value = newline.split('=', 1)
        variable = variable.strip().lower()
        value = value.strip()
        g_DeployParams.append((variable, value))
        
        if (GetVerboseLevel() >= 2): print "\t{0} = {1}".format(variable, value)        

    if (GetVerboseLevel()): print "\tFound and parsed {0} parameters".format(len(g_DeployParams))


def CreateRsyncCommand(source, dest, optargs=[]):
    Cmd = ["rsync", "-azIm", "--delete-excluded"]
    Cmd += optargs

    if (GetVerboseLevel() > 1): Cmd.append("-v")

    IgnoreFiles = GetDeployParam("ignore")

    for file in IgnoreFiles:
        if (len(file) <= 1): continue
        Exclude = "--exclude={0}".format(file[1])
        Cmd.append(Exclude)

    Cmd.append(source)
    Cmd.append(dest)

    if (GetVerboseLevel() > 1): print "\trsync cmd: {0}".format(Cmd)
    return Cmd


def CreateBackup(destination):
    global g_LastBackupPath
    
    print "\tCreating backup of existing source in '{0}'...".format(destination)
    BackupPath = GetBackupPath()
    BackupPath += "{0}_{1}_{2}/".format(GetDeployParamValue("name"), ExtractServerName(destination), datetime.datetime.now().strftime("%Y%m%d%H%M%S"))
    if (GetVerboseLevel()): print "\tBacking up files to '{0}'...".format(BackupPath)
    g_LastBackupPath = BackupPath

    if not os.path.exists(BackupPath):
        os.makedirs(BackupPath)

    RsyncCmd = CreateRsyncCommand(destination, BackupPath)
    Result = subprocess.call(RsyncCmd)
    if (Result != 0): return False
        
    return True


def DoMakePath(path):
    ServerName = ExtractServerName(path)
    
    if (not ServerName):
        if (GetVerboseLevel() > 1): print "\tEnsuring the path '{0}' exists.".format(path)
        os.makedirs(path)
    else:
        RemotePath = ExtractFileName(path)
        Cmd = "mkdir -p {0}".format(RemotePath)
        
        if (GetVerboseLevel() > 1): print "\tEnsuring the remote path '{0}' on '{1}' exists.".format(RemotePath, ServerName)
        
        ssh = subprocess.Popen(["ssh", ServerName, Cmd], shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        ssh.wait()
        error = ssh.stderr.readlines()
        
        if error != []:
            print "\tError: Remote ssh command returned error: {0}".format(error)
            return False
        elif (ssh.returncode != 0):
            print "\tError: Remote ssh command returned {0}".format(ssh.returncode)
            return False
        
    return True


def DeployFiles(destination):
    if (not DoMakePath(destination)): return False
    
    RsyncCmd = CreateRsyncCommand(g_SourcePath, destination)
    Result = subprocess.call(RsyncCmd)
    if (Result != 0): return False
    return True


def DoDeleteFile(destination, filename):
    if (GetVerboseLevel()): print "\tDeleting file '{0}' from destination.".format(filename)
    
    ServerName = ExtractServerName(destination)
    
    if (not ServerName):
        if (os.path.exists(filename)):
            os.remove(filename)
    else:
        RemotePath = ExtractFileName(filename)
        Cmd = "rm -f {0}".format(RemotePath)
        
        ssh = subprocess.Popen(["ssh", ServerName, Cmd], shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        ssh.wait()
        
        error = ssh.stderr.readlines()
        
        if error != []:
            print "\tError: Remote ssh command returned error: {0}".format(error)
            return False
        elif (ssh.returncode != 0):
            print "\tError: Remote ssh command returned {0}".format(ssh.returncode)
            return False
        
    return True


def DeployDeleteFiles(destination):
    DeletedFiles = GetDeployParam("delete_dest")

    for file in DeletedFiles:
        if (len(file) <= 1): continue

        filename = destination + file[1]

            # TODO: Fails for remote files
        if (not DoDeleteFile(destination, filename)): return False
        

    return True


def DoChangeOwnership(chowncmd):
    Cmd = "chown " + chowncmd
    if (GetVerboseLevel() > 1): print "\tChown Command: {0}".format(Cmd)
    
    childproc = subprocess.Popen(Cmd, shell=True)
    childproc.communicate()
    
    Result = childproc.returncode
    if (Result != 0): return False
    
    return True


def DoChangeRemoteOwnership(destination, chowncmd):
    ServerName = ExtractServerName(destination)
    PathName   = ExtractFileName(destination)
    BaseCmd = chowncmd.replace("{dest}", PathName)
    
    if (not ServerName): return DoChangeOwnership(BaseCmd)
    
    Cmd = "ssh {0} 'chown {1}'".format(ServerName, BaseCmd)
    if (GetVerboseLevel() > 1): print "\tRemote Chown Command: {0}".format(Cmd)
    
    childproc = subprocess.Popen(Cmd, shell=True)
    childproc.communicate()
    
    Result = childproc.returncode
    if (Result != 0): return False
    
    return True



def ChangeSourceOwnership():
    ChownSources = GetDeployParam("chown_source")
    
    if (GetVerboseLevel() > 0 and len(ChownSources) > 0):
        print "Changing source ownership on {0} entries.".format(len(ChownSources))

    for chownsource in ChownSources:
        if (len(chownsource) > 1):
            Result = DoChangeOwnership(chownsource[1])
            if (not Result): return False

    return True


def ChangeDestOwnership(destination):
    ChownDests = GetDeployParam("chown_dest")
    
    if (GetVerboseLevel() > 0 and len(ChownDests) > 0):
        print "Changing destination ownership on {0} entries.".format(len(ChownDests))

    for chowndest in ChownDests:
        if (len(chowndest) > 1):
            Result = DoChangeRemoteOwnership(destination, chowndest[1])
            if (not Result): return False

    return True


def MatchServerName(HostName, ServerName):
    TmpHostName = HostName.lower();
    if (TmpHostName == 'all'): return True
    if (TmpHostName == "localhost" or TmpHostName == "127.0.0.1"): TmpHostName = g_HostName
    return ServerName.lower().startswith(TmpHostName)


def DeployManualCopy(destination):
    
    ManualCopyCmds = GetDeployParam("manualcopy")
    ServerName = ExtractServerName(destination)
    
    for manualcopycmd in ManualCopyCmds:
        if (len(manualcopycmd) <= 1): continue
        copycmd = manualcopycmd[1]
        
        cmdresult = copycmd.split(':', 1)
        if (len(cmdresult) <= 1): continue
        
        if (not MatchServerName(cmdresult[0], ServerName)): continue
        
        BaseCmd = cmdresult[1].replace("{source}", g_SourcePath).replace("{dest}", destination).strip()
        if (GetVerboseLevel() > 0): print "\tManually copying file: {0}".format(BaseCmd)
        
        ScpCmd = "scp -pq "
        if (GetVerboseLevel() > 2): ScpCmd += "-v "
        ScpCmd += BaseCmd
        if (GetVerboseLevel() > 1): print "\tRunning scp command: {0}".format(ScpCmd)
        
        childproc = subprocess.Popen(ScpCmd, shell=True)
        childproc.communicate()
        Result = childproc.returncode
        if (Result != 0): return False

    return True


def DoOneDeploy(destination):
    global g_DeployCount
    
    ServerName = ExtractServerName(destination)
    
    if (IsLocalOnly()):
        if (not MatchServerName(g_HostName, ServerName)):
            if (GetVerboseLevel() > 0): print "Skipping deployment to {0}.".format(destination)
            return True
    elif (IsServerOnly()):
        if (not MatchServerName(g_InputOptions.serveronly, ServerName)):
            if (GetVerboseLevel() > 0): print "Skipping deployment to {0}.".format(destination)
            return True
        
    if (CompareSourceDestPaths(g_SourcePath, destination)):
        print "\tWarning: The source and destination paths are the same...skipping deployment!"
        return True
        
    print "Deploying to '{0}'...".format(destination)
    g_DeployCount += 1

    if (IsBackup()):
        if (not CreateBackup(destination)):
            DisplayError(destination, "\tError: Backup failed...aborting deployment!")
            return False

    if (not DeployFiles(destination)):
        DisplayError(destination, "\tError copying files with rsync...aborting deployment!")
        return False
    
    if (not DeployManualCopy(destination)):
        DisplayError(destination, "\tError manually copying specific files...aborting deployment!")
        return False

    if (not DeployDeleteFiles(destination)):
        DisplayError(destination, "\tError deleting files from deployment path!")
        return False
    
    if (not ChangeDestOwnership(destination)):
        DisplayError(destination, "Error changing ownership of destination files...aborting deployment!")
        return False

    AddDeployLog(destination)
    print "\tSuccessfully completed deployment!"

    return True


def DoDeploy():
    
    if (not ChangeSourceOwnership()):
        DisplayError("", "Error changing ownership of source files...aborting deployment!")
        return False
    
    if (g_InputOptions.destination):
        return DoOneDeploy(g_InputOptions.destination)

    AllDests = GetDeployParam("dest")

    if (len(AllDests) == 0):
        print "Error: No deployment destinations specified!"
        return False

    for destination in AllDests:
        if (len(destination) > 1):
            DoOneDeploy(destination[1])
            
    if (IsLocalOnly() and g_DeployCount == 0):
        print "Warning: No deployment occurred as localhost was not found in deploy file '{0}'!".format(g_InputOptions.deployfile)
    elif (IsServerOnly() and g_DeployCount == 0):
        print "Warning: No deployment occurred as {1} was not found in deploy file '{0}'!".format(g_InputOptions.deployfile, g_InputOptions.serveronly)
   
    return True


#
# Begin Main Program
#
(g_InputOptions, g_InputArgs) = ParseInputArgs()
LoadDeployFile(g_InputOptions.deployfile)

if (GetVerboseLevel()):
    print "Local hostname is '{0}'".format(GetHostName())

LoadSecrets()
InitDatabase()

g_HostName = GetHostName()
g_SourcePath = GetSourcePath()
print "Installing from local path '{0}'".format(g_SourcePath)

g_RevisionNumber = GetRevisionNumber()

DoDeploy()

CloseDatabase()