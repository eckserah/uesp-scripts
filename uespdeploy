#!/usr/bin/python26
#
# uespdeploy
#   by Dave Humphrey (dave@uesp.net), created on 5 Jan 2014
#
# A basic script for deploying software onto one or more servers on
# the UESP.net website.
#
# Run 'uespdeploy -h' to see basic help on command line options.
# By default it tries to load and rin the 'uesp.deploy' file in the
# current directory. Command line options will override data from the
# deployment data file.
#

import os
import re
import socket
import datetime
import subprocess
from optparse import OptionParser
import sys
import MySQLdb as mdb
import getpass
import shlex
import pipes

#
# Constants
#
SECRETS_FILE = "/home/uesp/secrets/uespdeploy.secrets"
DEFAULT_DEPLOY = "uesp.deploy"
DEFAULT_SOURCEPATH = "./"
DEFAULT_BACKUPPATH = "/deploytmp/"
COMMENT_CHAR = '#'

DB_DATABASE = "uesp_deploy"
DB_TABLE = "deploylog"

    # The following will be set within the external secrets file loaded at run time
DB_USER = ""
DB_PASSWORD = ""
DB_SERVER = "content3.uesp.net"
DB_PORT = 3306

#
# Global variables
#
g_InputOptions = []
g_InputArgs = []
g_DeployParams = []
g_SourcePath = DEFAULT_SOURCEPATH
g_LastBackupPath = ""
g_RevisionNumber = ""
g_HostName = ""
g_DeployName = ""
g_DeployCount = 0
g_DB = None

g_ErrorCount = 0
g_WarningCount = 0
g_DeployDestCount = 0
g_DeployFileCount = 0


def LoadSecrets():
    fp = open(SECRETS_FILE)
    secrets = fp.read()
    fp.close()
    exec(secrets) in globals()


def CreateDeployTable():
    if (GetVerboseLevel()): print "Creating table {0}.{1}".format(DB_DATABASE, DB_TABLE)
    
    HeaderStr = "CREATE TABLE {0}.{1} (".format(DB_DATABASE, DB_TABLE);
    TableDef = """
                id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
                username VARCHAR(64) NOT NULL,
                timestamp TIMESTAMP NOT NULL DEFAULT NOW(),
                appname VARCHAR(64) NOT NULL,
                options TEXT NOT NULL,
                source TEXT NOT NULL,
                destination TEXT NOT NULL,
                backuppath TEXT NOT NULL,
                deployfile TEXT NOT NULL,
                revision TEXT NOT NULL,
                error TEXT NOT NULL,
                message TEXT NOT NULL
                """
    QueryStr = HeaderStr + TableDef + ");"
    if (GetVerboseLevel() >= 2): print "\t{0}".format(QueryStr)
    g_DB.query(QueryStr)
    return True


def InitDatabase():
    global g_DB
    
    if (GetVerboseLevel() > 1): print "Trying to connect to MySQL database {0} on {1}:{2} as {3}".format(DB_DATABASE, DB_SERVER, DB_PORT, DB_USER)
    g_DB = mdb.connect(host=DB_SERVER, user=DB_USER, passwd=DB_PASSWORD, db=DB_DATABASE, port=DB_PORT)
    
    QueryStr = "SELECT * FROM information_schema.tables WHERE table_schema='{0}' AND table_name='{1}' LIMIT 1;".format(DB_DATABASE, DB_TABLE)
    g_DB.query(QueryStr)
    Results = g_DB.store_result()
    
    if (Results.num_rows() <= 0): CreateDeployTable()

    return True


def CloseDatabase():
    if (g_DB): g_DB.close()
    return True


def DoesPathExist(pathname):
    ServerName = ExtractServerName(pathname)
    
    if (IsLocalhost(ServerName)): return os.path.exists(pathname)
    
    RemotePath = ExtractFileName(pathname)
    
    Cmd = ['ssh', ServerName, 'test -d ' + pipes.quote(RemotePath)]
    if (GetVerboseLevel() > 1): print "\tCmd: {0}".format(Cmd)
    
    return subprocess.call(Cmd) == 0


def GetRevisionNumber():
    global g_SourcePath
    
    currentPath = os.getcwd()
    os.chdir(os.path.abspath(g_SourcePath))
    
    Cmd = ["hg", "id", "--id", "-r ."]
    RevNum = subprocess.Popen(Cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0].rstrip()
    
    try:
        Test = int(RevNum, 16)
    except ValueError:
        RevNum = ""
    
    if (GetVerboseLevel()): print "Got '{0}' for the revision number".format(RevNum)
    
    os.chdir(currentPath)
    return RevNum


def CompareSourceDestPaths(source, dest):
    SourceServer = ExtractServerName(source)
    DestServer   = ExtractServerName(dest)
    SourcePath   = ExtractFileName(source)
    DestPath     = ExtractFileName(dest)
    
    if (not SourceServer or SourceServer == "localhost" or SourceServer == "127.0.0.1"): 
        SourceServer = g_HostName
        SourcePath = os.path.abspath(SourcePath)
        
    if (not DestServer or DestServer == "localhost" or DestServer == "127.0.0.1"):
        DestServer = g_HostName
        DestPath = os.path.abspath(DestPath)

    if (not SourcePath.endswith("/")): SourcePath += "/"
    if (not DestPath.endswith("/")):   DestPath += "/"
    
    if (SourceServer.lower() != DestServer.lower()): return False
    if (SourcePath != DestPath): return False
    
    try:
        if (not os.path.samefile(SourcePath, DestPath)): return False
    except:
        return False
    
    if (GetVerboseLevel() > 1): print "\tCompareSourceDestPaths( {0}, {1} )".format(source, dest)
    return True


def StripLastSlash(path):
    if (path.endswith('/')): return path[:-1]
    return path


def DisplayError(destination, errormsg):
    print errormsg
    AddDeployLog(destination, errormsg)
    return False


def AddDeployLog(destination, error=""):
    OptionStr = g_DB.escape_string(', '.join('%s=%s' % (k,v) for k,v in vars(g_InputOptions).items()))
    SourcePath = g_DB.escape_string(os.path.abspath(g_SourcePath))
    DestPath = g_DB.escape_string(destination)
    
    if (not IsBackup()):
        BackupPath = ""
    else:
        BackupPath = g_DB.escape_string(os.path.abspath(g_LastBackupPath))
    
    with open (g_InputOptions.deployfile, "r") as myfile:
        DeployFile = g_DB.escape_string(myfile.read())
    
    HeaderStr = "INSERT INTO {0}.{1} (username, appname, options, source, destination, backuppath, error, deployfile, revision, message) ".format(DB_DATABASE, DB_TABLE)
    ValueStr = "VALUES ('{0}', '{1}', \"{2}\", '{3}', '{4}', '{5}', '{6}', '{7}', '{8}', '{9}');".format(
                                                                                    g_DB.escape_string(getpass.getuser()),
                                                                                    g_DB.escape_string(GetDeployParamValue("name")),
                                                                                    OptionStr,
                                                                                    SourcePath,
                                                                                    DestPath,
                                                                                    BackupPath,
                                                                                    g_DB.escape_string(error),
                                                                                    DeployFile,
                                                                                    g_DB.escape_string(g_RevisionNumber),
                                                                                    g_DB.escape_string(GetDeployMessage())) 
    QueryStr = HeaderStr + ValueStr
    
    if (GetVerboseLevel() >= 2): print "\tAdding deploy log database row:\n\t\t{0}".format(QueryStr)
    
    g_DB.query(QueryStr)
    
    return True


def ParseInputArgs():
    parser = OptionParser(usage="usage: %prog [options] [deployname]", version='v0.1 28 Jan 2014')
    parser.add_option("-v", "--verbosity",  action="count",         dest="verbose",     help="increase output verbosity")
    parser.add_option("-s", "--source",     action="store",         dest="source",      help="path to the source being deployed (defaults to the current local directory)", type="string")
    parser.add_option("-d", "--destination",action="store",         dest="destination", help="destination path for the installation", type="string")
    parser.add_option("-f", "--file",       action="store",         dest="deployfile",  help="use the specified deployment file instead of uesp.deploy", type="string", default=DEFAULT_DEPLOY)
    parser.add_option("-H", "--hostname",   action="store",         dest="hostname",    help="manually specify the localhost's name", type="string")
    parser.add_option("-b", "--backup",     action="store_true",    dest="backup",      help="backup destination files to the tmp directory")
    parser.add_option("-B", "--backuppath", action="store",         dest="backuppath",  help="destination path for any backups") 
    parser.add_option("-l", "--localonly",  action="store_true",    dest="localonly",   help="only deploy to the localhost")
    parser.add_option("-S", "--serveronly", action="store",         dest="serveronly",  help="only deploy the specified server name")
    parser.add_option("-m", "--message",    action="store",         dest="message",     help="a short message describing the deployment", type="string", default="")
    parser.add_option("-T", "--staged",     action="store_true",    dest="staged",      help="use a staged deployment by copying to a temporary directory first")
    return parser.parse_args()


def GetDeployParamValue(Param):
    Result = GetDeployParam(Param)
    if (len(Result) == 0): return ""
    if (len(Result[0]) <= 1): return ""
   
    return Result[0][1]


def GetDeployParam(Param):
    global g_DeployParams
    tmpParam = Param.lower()
    
    Result = [item for item in g_DeployParams if item[0] == tmpParam]
    return Result


def GetHostName():
    global g_InputOptions
    if (g_InputOptions.hostname): return g_InputOptions.hostname;
    return socket.gethostname()


def GetVerboseLevel():
    global g_InputOptions
    
    if (g_InputOptions.verbose): return int(g_InputOptions.verbose)
    
    Verbose = GetDeployParamValue("verbosity")
    if (Verbose): return int(Verbose)
    
    return 0


def IsLocalOnly():
    global g_InputOptions
    if (g_InputOptions.localonly): return True
    return False


def IsServerOnly():
    global g_InputOptions
    if (g_InputOptions.serveronly): return True
    return False


def IsBackup():
    global g_InputOptions
    
    if (GetDeployParamValue("backup").lower() == "true"): return True
    if (g_InputOptions.backup): return True

    return False


def IsStaged():
    global g_InputOptions
    
    if (GetDeployParamValue("staged").lower() == "true"): return True
    if (g_InputOptions.staged): return True

    return False


def IsLocalhost(ServerName):
    if (ServerName == ''): return True
    if (ServerName == 'localhost'): return True
    if (ServerName == '127.0.0.1'): return True
    if (ServerName == g_HostName): return True
    
    return False


def GetBackupPath():
    global g_InputOptions    
    BackupPath = g_InputOptions.backuppath;
    
    if (BackupPath):
        if (not BackupPath.endswith('/')): BackupPath += '/'
        return BackupPath
    
    BackupPath = GetDeployParamValue("backuppath")
    
    if (BackupPath):
        if (not BackupPath.endswith('/')): BackupPath += '/'
        return BackupPath
    
    return DEFAULT_BACKUPPATH


def GetDeployMessage():
    Message = g_InputOptions.message
    if (not Message): Message = GetDeployParamValue("message")
    return Message


def GetSourcePath():
    SourcePath = g_InputOptions.source
    
    if (not SourcePath):
        SourcePath = GetDeployParamValue("source")
        
    if (not SourcePath):
        SourcePath = DEFAULT_SOURCEPATH
        
    if (not SourcePath.endswith('/')): SourcePath += '/'
    return SourcePath


def ExtractServerName(path):
    TmpSplit = path.split(':', 1)
    if (len(TmpSplit) == 1): return "localhost";
    return TmpSplit[0]


def ExtractFileName(path):
    TmpSplit = path.split(':', 1)
    if (len(TmpSplit) == 1): return TmpSplit[0];
    return TmpSplit[1]


def ExtractPathName(path):
    TmpSplit = path.split(':', 1)
    if (len(TmpSplit) == 1):
        Filename = TmpSplit[0]
    else:
        Filename = TmpSplit[1]
        
    if (Filename.endswith('/')): return Filename
    return Filename.rsplit('/', 1)[0] + '/'


def LoadDeployFile(filename):
    global g_DeployParams
    print "Loading deploy file '{0}'...".format(filename)

    f = open(filename)
    lines = f.readlines()
    f.close()

    for line in lines:
        newline = line.split(COMMENT_CHAR)[0].strip()
        if (not newline): continue
        
        variable, value = newline.split('=', 1)
        variable = variable.strip().lower()
        value = value.strip()
        g_DeployParams.append((variable, value))
        
        if (GetVerboseLevel() >= 2): print "\t{0} = {1}".format(variable, value)        

    if (GetVerboseLevel()): print "\tFound and parsed {0} parameters".format(len(g_DeployParams))


def CreateRsyncCommand(source, dest, optargs=[]):
    # Cmd = ["sudo", "-u", getpass.getuser(), "rsync", "-azIm", "--omit-dir-times", "-e", "ssh -t -t", "--rsync-path", "sudo rsync"]
    Cmd = ["rsync", "-azIm", "--omit-dir-times"]
    Cmd += optargs

    if (GetVerboseLevel() == 0): Cmd.append("-q")
    if (GetVerboseLevel() > 1): Cmd.append("-v")
    if (GetVerboseLevel() > 2): Cmd.append("-v")

    IgnoreFiles = GetDeployParam("ignore")

    for file in IgnoreFiles:
        if (len(file) <= 1): continue
        Exclude = "--exclude={0}".format(file[1])
        Cmd.append(Exclude)

    Cmd.append(source)
    Cmd.append(dest)

    if (GetVerboseLevel() > 1): print "\trsync cmd: {0}".format(' '.join(Cmd))
    return Cmd


def CreateBackup(destination):
    global g_LastBackupPath
    global g_ErrorCount
    
    ServerName = ExtractServerName(destination)
    Pathname   = ExtractFileName(destination)
    
    if (Pathname == '/dev/null'):
        if (GetVerboseLevel() > 1): print "\tSkipping backup of /dev/null destination'..."
        return True
    
    if (not DoesPathExist(destination)):
        print "\tSkipping backup of not existant destination '{0}'!".format(destination)
        return True
    
    if (not CreateBackupPath(ServerName, GetBackupPath())):
        DisplayError(destination, "\tError creating the temporary path for staged deployment!")
        return False
    
    print "\tCreating backup of existing source in '{0}'...".format(destination)
    BackupPath = GetBackupPath()
    BackupPath += "{0}_{1}_{2}/".format(GetDeployParamValue("name"), ExtractServerName(destination), datetime.datetime.now().strftime("%Y%m%d%H%M%S"))
    if (GetVerboseLevel()): print "\tBacking up files to '{0}'...".format(BackupPath)
    g_LastBackupPath = BackupPath

    if not os.path.exists(BackupPath):
        os.makedirs(BackupPath)

    RsyncCmd = CreateRsyncCommand(destination, BackupPath)
    
    with open(os.devnull, "w") as fnull: #stderr=fnull,
        Result = subprocess.call(RsyncCmd, shell=False)
    
    if (Result != 0):
        print "\tError: Rsync transfer failed!"
        g_ErrorCount += 1
        return False
        
    return True


def DoMakePath(path):
    global g_ErrorCount
    
    ServerName = ExtractServerName(path)
    
    if (not ServerName):
        if (GetVerboseLevel() > 0): print "\tEnsuring the local path '{0}' exists.".format(path)
        if (os.path.exists(path)): return True
        
        Cmd = "sudo mkdir -p {0}".format(path, getpass.getuser())
        if (GetVerboseLevel() > 1): print "\tMkdir Cmd: {0}".format(SshCmd)
        
        mkdir = subprocess.Popen(Cmd, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        mkdir.wait()
        error = mkdir.stderr.readlines()
        
        if (mkdir.returncode != 0):
            print "\tError: Mkdir command returned {1} (stderr='{0}')!".format(error, mkdir.returncode)
            g_ErrorCount += 1
            return False
        
        Cmd = "sudo chown {0}:{0} {1}".format(getpass.getuser(), path)
        if (GetVerboseLevel() > 1): print "\tChanging the ownership of local path '{0}'...".format(path)
        if (GetVerboseLevel() > 2): print "\tChown Cmd: {0}".format(Cmd)
        
        chown = subprocess.Popen(Cmd, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        chown.wait()
        error = chown.stderr.readlines()
        
        if (chown.returncode != 0):
            print "\tError: Chown command returned {1} (stderr='{0}')!".format(error, chown.returncode)
            g_ErrorCount += 1
            return False
        
    else:
        if (GetVerboseLevel() > 0): print "\tEnsuring the remote path '{0}' exists on {1}...".format(path, ServerName)
        
        RemotePath = ExtractFileName(path)
        if (DoesPathExist(ServerName + ':' + RemotePath)): return True
        
        Cmd = "sudo mkdir -p {0}".format(RemotePath, getpass.getuser())
        SshCmd = ["ssh", "-t", ServerName, Cmd];
        
        if (GetVerboseLevel() > 1): print "\tCreating the remote path '{0}' on '{1}'...".format(RemotePath, ServerName)
        if (GetVerboseLevel() > 2): print "\tMkdir Cmd: {0}".format(SshCmd)
        
        ssh = subprocess.Popen(SshCmd, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        ssh.wait()
        error = ssh.stderr.readlines()
        
        if (ssh.returncode != 0):
            print "\tError: Remote ssh command returned {1} (stderr='{0}')!".format(error, ssh.returncode)
            g_ErrorCount += 1
            return False
        
        Cmd = "sudo chown {0}:{0} {1}".format(getpass.getuser(), RemotePath)
        SshCmd = ["ssh", "-t", ServerName, Cmd];
        
        if (GetVerboseLevel() > 1): print "\tChanging the ownership of remote path '{0}' on '{1}'...".format(RemotePath, ServerName)
        if (GetVerboseLevel() > 2): print "\tChown Cmd: {0}".format(SshCmd)
        
        ssh = subprocess.Popen(SshCmd, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        ssh.wait()
        error = ssh.stderr.readlines()
        
        if (ssh.returncode != 0):
            print "\tError: Remote ssh command returned {1} (stderr='{0}')!".format(error, ssh.returncode)
            g_ErrorCount += 1
            return False
        
    return True


def DeployFiles(destination):
    global g_ErrorCount
    
    if (ExtractFileName(destination) == '/dev/null'):
        if (GetVerboseLevel() > 0): print "\tSkipping deployment of files to /dev/null destination'..."
        return True
    
    if (not DoMakePath(destination)): return False
        
    RsyncCmd = CreateRsyncCommand(g_SourcePath, destination)
    
    if (GetVerboseLevel() > 0): print "\tCopying files from {0} to {1}...".format(g_SourcePath, destination)
    
    with open(os.devnull, "w") as fnull: #stderr=fnull,
        Result = subprocess.call(RsyncCmd, shell=False)
        
    if (Result != 0):
        print "\tError: Rsync command returned {0}!".format(Result)
        g_ErrorCount += 1
        return False
    
    return True


def DoDeleteFile(destination, filename):
    global g_ErrorCount
    
    if (GetVerboseLevel()): print "\tDeleting file '{0}' from destination.".format(filename)
    
    ServerName = ExtractServerName(destination)
    
    if (not ServerName):
        if (os.path.exists(filename)):
            os.remove(filename)
    else:
        RemotePath = ExtractFileName(filename)
        Cmd = "rm -f {0}".format(RemotePath)
        
        ssh = subprocess.Popen(["ssh", ServerName, Cmd], shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        ssh.wait()
        
        error = ssh.stderr.readlines()
        
        if error != []:
            print "\tError: Remote ssh command returned error: {0}".format(error)
            g_ErrorCount += 1
            return False
        elif (ssh.returncode != 0):
            print "\tError: Remote ssh command returned {0}".format(ssh.returncode)
            g_ErrorCount += 1
            return False
        
    return True


def DeployDeleteFiles(destination):
    DeletedFiles = GetDeployParam("delete_dest")

    for file in DeletedFiles:
        if (len(file) <= 1): continue

        filename = destination + file[1]

            # TODO: Fails for remote files
        if (not DoDeleteFile(destination, filename)): return False
        

    return True


def DoChangeOwnership(chowncmd):
    global g_ErrorCount
    
    Cmd = "sudo chown " + chowncmd
    if (GetVerboseLevel() > 1): print "\tChown Command: {0}".format(Cmd)
    
    childproc = subprocess.Popen(Cmd, shell=True)
    childproc.communicate()
    
    Result = childproc.returncode
    
    if (Result != 0):
        print "\tError: Local chown command failed!"
        g_ErrorCount += 1
        return False
    
    return True


def DoChangePermission(chmodcmd):
    global g_ErrorCount
    
    Cmd = "sudo chmod " + chmodcmd
    if (GetVerboseLevel() > 1): print "\tChmod Command: {0}".format(Cmd)
    
    childproc = subprocess.Popen(Cmd, shell=True)
    childproc.communicate()
    
    Result = childproc.returncode
    
    if (Result != 0):
        print "\tError: Local chmod command failed!"
        g_ErrorCount += 1
        return False
    
    return True


def DoChangeRemoteOwnership(destination, chowncmd):
    global g_ErrorCount
    
    ServerName = ExtractServerName(destination)
    PathName   = ExtractFileName(destination)
    BaseCmd = chowncmd.replace("{dest}", PathName)
    
    if (not ServerName): return DoChangeOwnership(BaseCmd)
    
    Cmd = "ssh -t -q {0} sudo chown {1}".format(ServerName, BaseCmd)
    if (GetVerboseLevel() > 1): print "\tRemote Chown Command: {0}".format(Cmd)
    
    childproc = subprocess.Popen(Cmd, shell=True)
    childproc.communicate()
    
    Result = childproc.returncode
    
    if (Result != 0):
        print "\tError: Remote chown command failed!"
        g_ErrorCount += 1
        return False
    
    return True


def DoChangeRemotePermission(destination, chmodcmd):
    global g_ErrorCount
    
    ServerName = ExtractServerName(destination)
    PathName   = ExtractFileName(destination)
    BaseCmd = chmodcmd.replace("{dest}", PathName)
    
    if (not ServerName): return DoChangePermission(BaseCmd)
    
    Cmd = "ssh -t -q {0} sudo chmod {1}".format(ServerName, BaseCmd)
    if (GetVerboseLevel() > 1): print "\tRemote Chmod Command: {0}".format(Cmd)
    
    childproc = subprocess.Popen(Cmd, shell=True)
    childproc.communicate()
    
    Result = childproc.returncode
    
    if (Result != 0):
        print "\tError: Remote chmod command failed!"
        g_ErrorCount += 1
        return False
    
    return True


def ChangeSourceOwnership():
    ChownSources = GetDeployParam("chown_source")
    
    if (GetVerboseLevel() > 0): print "\tChanging ownership on source..."
    
    #if (GetVerboseLevel() > 0 and len(ChownSources) > 0):
        #print "Changing source ownership on {0} entries.".format(len(ChownSources))
        #print "Warning: Skipping changing source ownership on {0} entries!".format(len(ChownSources))
        #return True

    for chownsource in ChownSources:
        if (len(chownsource) > 1):
            Result = DoChangeOwnership(chownsource[1])
            if (not Result): return False

    return True


def ChangeDestOwnership(destination):
    ChownDests = GetDeployParam("chown_dest")
    
    if (GetVerboseLevel() > 0): print "\tChanging ownership on destination..."
    
    #if (GetVerboseLevel() > 0 and len(ChownDests) > 0):
        #print "Changing destination ownership on {0} entries.".format(len(ChownDests))
        #print "Warning: Skipping changing destination ownership on {0} entries!".format(len(ChownDests))
        #return True

    for chowndest in ChownDests:
        if (len(chowndest) > 1):
            Result = DoChangeRemoteOwnership(destination, chowndest[1])
            if (not Result): return False

    return True


def ChangeSourcePermission():
    ChmodSources = GetDeployParam("chmod_source")
    
    if (GetVerboseLevel() > 0): print "\tChanging permission on source..."

    for chmodsource in ChmodSources:
        if (len(chmodsource) > 1):
            Result = DoChangePermission(chmodsource[1])
            if (not Result): return False

    return True


def ChangeDestPermission(destination):
    ChmodDests = GetDeployParam("chmod_dest")
    
    if (GetVerboseLevel() > 0): print "\tChanging permission on destination..."

    for chmoddest in ChmodDests:
        if (len(chmoddest) > 1):
            Result = DoChangeRemotePermission(destination, chmoddest[1])
            if (not Result): return False

    return True


def MatchServerName(HostName, ServerName):
    TmpHostName = HostName.lower();
    if (TmpHostName == 'all'): return True
    if (TmpHostName == "localhost" or TmpHostName == "127.0.0.1"): TmpHostName = g_HostName
    return ServerName.lower().startswith(TmpHostName)


def DeployManualCopy(destination):
    global g_ErrorCount
    
    ManualCopyCmds = GetDeployParam("manualcopy")
    ServerName = ExtractServerName(destination)
    
    DestServer = ServerName;
    if (DestServer and not DestServer.endswith(':')): DestServer += ':'
    
    for manualcopycmd in ManualCopyCmds:
        if (len(manualcopycmd) <= 1): continue
        copycmd = manualcopycmd[1]
        
        cmdresult = copycmd.split(':', 1)
        if (len(cmdresult) <= 1): continue
        
        if (not MatchServerName(cmdresult[0], ServerName)): continue
        
        BaseCmd = cmdresult[1].replace("{source}", g_SourcePath).replace("{dest}", destination).replace("{destserver}", DestServer).strip()
        if (GetVerboseLevel() > 0): print "\tManually copying file: {0}".format(BaseCmd)
        
        SplitCmd = shlex.split(BaseCmd)
        
        if (len(SplitCmd) > 1):
            PathName = ExtractPathName(SplitCmd[1])
            
            if (not DoCreatePath(destination, PathName)):
                print "\tError: Failed to create the path...aborting manual copy of '{0}'!".format(SplitCmd[0])
                continue
        
        ScpCmd = "scp -pqr "
        if (GetVerboseLevel() > 2): ScpCmd += "-v "
        ScpCmd += BaseCmd
        if (GetVerboseLevel() > 1): print "\tScp command: {0}".format(ScpCmd)
        
        childproc = subprocess.Popen(ScpCmd, shell=True)
        childproc.communicate()
        Result = childproc.returncode
        
        if (Result != 0):
            print '\tError: scp copy command failed!'
            g_ErrorCount += 1
            return False

    return True


_quote_re1 = re.compile( r"([\!\"\$\\\`])" )
_quote_re2 = re.compile( r"([\t\ \!\"\#\$\&\'\(\)\*\:\;\<\>\?\@\[\\\]\^\`\{\|\}\~])" )

def ShellEscapeString(s):
    
    if s.find( '\'' ) >= 0:
        s1 = '"' + _quote_re1.sub( r"\\\1", s ) + '"'
    else:
        s1 = "'" + s + "'"
        
    s2 = _quote_re2.sub( r"\\\1", s )
    return s2
    
    if len( s1 ) <= len( s2 ):
        return s1
    else:
        return s2


def FindStringInFile(filename, findstring):
    ServerName = ExtractServerName(filename)
    
    if (not ServerName):
        Cmd = ["grep", "-c", ShellEscapeString(findstring), filename ]
    else:
        FilePath = ExtractFileName(filename)
        Cmd = ["ssh", ServerName, "grep -c {1} {0}".format(FilePath, ShellEscapeString(findstring))]
        
    if (GetVerboseLevel() > 1): print "\tgrep cmd: {0}".format(Cmd)
    
    try:
        GrepResult = subprocess.Popen(Cmd, shell=False, stdout = subprocess.PIPE).communicate()[0].strip()
        if (GetVerboseLevel() > 1): print "\tgrep result = {0}".format(GrepResult)
    except Exception as e:
        if (GetVerboseLevel() > 1): print "\t{0}".format(e)
        return False
    
    if (not GrepResult): return False
    if (int(GrepResult) > 0): return True
        
    return False 


def AddStringToFile(filename, addstring):
    global g_ErrorCount
    
    ServerName = ExtractServerName(filename)
    
    if (not ServerName):
        Cmd = ["echo", ShellEscapeString(addstring), ">>", filename ]
    else:
        FilePath = ExtractFileName(filename)
        Cmd = ["ssh", ServerName, "echo {1} >> {0}".format(FilePath, ShellEscapeString(addstring))]
        
    if (GetVerboseLevel() > 1): print "\tappend file cmd: {0}".format(Cmd)
    
    try:
        appendcmd = subprocess.Popen(Cmd, shell=False)
        appendcmd.wait()
        
        if (appendcmd.returncode != 0):
            print "\tError: Failed to append data to file '{0}' on '{1}'!".format(FilePath, ServerName)
            g_ErrorCount += 1
            return False
    except:
        print "\tError: Failed to append data to file '{0}' on '{1}'!".format(FilePath, ServerName)
        g_ErrorCount += 1
        return False
        
    return True


def DoAddLineDest(destination, addline):
    global g_ErrorCount
    
    if (not addline): return True
    
    splitaddline = addline.split(':', 1)
    
    if (len(splitaddline) <= 1):
        if (GetVerboseLevel() > 0): print "\tError: Improperly formatted addline command found: {0}".addline
        g_ErrorCount += 1 
        return True
    
    FileToModify = splitaddline[0].strip()
    LineToAdd    = splitaddline[1].strip()
    if (GetVerboseLevel() > 1): print "\tAdding line '{1}' to destination file '{0}'.".format(FileToModify, LineToAdd)
    
    Filename = destination + FileToModify
    
    if (FindStringInFile(Filename, LineToAdd)):
        if (GetVerboseLevel() > 0): print "\tLine '{1}' already exists in file '{0}'...skipping".format(FileToModify, LineToAdd)
        return True
    
    if not AddStringToFile(Filename, LineToAdd): return False
    return True


def AddLinesDest(destination):
    
    if (ExtractFileName(destination) == '/dev/null'):
        if (GetVerboseLevel() > 1): print "\tSkipping adding lines to files in /dev/null destination'..."
        return True
    
    AddLines = GetDeployParam("addline")
    
    for addline in AddLines:
        if (len(addline) <= 1): continue
        DoAddLineDest(destination, addline[1])
        
    return True


def DoCreatePath(destination, pathname):
    global g_ErrorCount
    
    ServerName = ExtractServerName(destination)
    DestPathName = ExtractFileName(destination)
    pathname = pathname.replace('{dest}', DestPathName)
    
    if (GetVerboseLevel() > 0): print "\tCreating path '{0}' on destination {1}...".format(pathname, (ServerName if ServerName else localhost))
    
    if (len(pathname) == 0):
        DisplayError(destination, "\tError: Can't create empty path!")
        g_ErrorCount += 1
        return False
    
    if (ServerName):
        fullPath = ServerName + ':' + pathname
    else:
        fullPath = pathname
        
    if (GetVerboseLevel() > 1): print "\tCreating path '{0}'...".format(fullPath)
    
    return DoMakePath(fullPath)


def CreatePaths(destination):
    PathsToCreate = GetDeployParam("createpath")
    
    for createpath in PathsToCreate:
        if (len(createpath) <= 1): continue
        DoCreatePath(destination, createpath[1])
    
    return True


def CreateBackupPath(ServerName, BackupPath):
    
    if (IsLocalhost(ServerName)):
        FullBackupPath = BackupPath
    else:
        FullBackupPath = ServerName + ':' + BackupPath
        
    if (GetVerboseLevel() > 1): print "\tEnsuring the backup path {0} exists...".format(FullBackupPath)
        
    if (DoesPathExist(FullBackupPath)): 
        if (not DoMakePath(FullBackupPath)): return False
    
    if (not DoChangeRemoteOwnership(FullBackupPath, ":uespadmin {0}".format(BackupPath))):  return False
    if (not DoChangeRemotePermission(FullBackupPath, "g+rw {0}".format(BackupPath))): return False
    
    return True



def CopyStagedFiles(destination, StagedPath):
    global g_ErrorCount
    
    if (GetVerboseLevel() > 0): print "\tCopying files to the staging directory..."
    
    if (not DoMakePath(destination)):
        print "\tError: The destination path does not exist and cannot be created!"
        return False
    
    ServerName = ExtractServerName(destination)
    PathName   = ExtractFileName(destination)
    
    if (ServerName):
        FullStagedPath = ServerName + ':' + StagedPath
    else:
        FullStagedPath = StagedPath
        
    if (not DoMakePath(FullStagedPath)):
        print "\tError: Failed to create the temporary staging path...aborting deployment!"
        return False
    
    if (GetVerboseLevel() > 0): print "\tUsing staging directory {0}". format(FullStagedPath)
    
    RsyncCmd = 'rsync -a {2} {0} {1}'.format(destination, StagedPath, '-v' if (GetVerboseLevel() > 2) else '')
    if (GetVerboseLevel() > 1): print "\tRsync command: {0}". format(RsyncCmd)
    
    ScpCmd = "scp -pqr {2} {0} {1}".format(destination, StagedPath, '-v' if (GetVerboseLevel() > 2) else '')
    if (GetVerboseLevel() > 1): print "\tScp command: {0}". format(ScpCmd)
    
    childproc = subprocess.Popen(RsyncCmd, shell=True)
    childproc.communicate()
    Result = childproc.returncode
        
    if (Result != 0):
        print "\tError: Failed to copy files to the staging directory!"
        g_ErrorCount += 1
        return False
    
    return True


def SwitchStagedDeploy(destination, StagedPath):
    global g_ErrorCount
    
    if (GetVerboseLevel() > 0): print "\tSwapping staged and original destination directories..."
    
    TmpPath = StagedPath[:-1] + '_tmp'
    ServerName = ExtractServerName(destination)
    PathName = StripLastSlash(ExtractPathName(destination))
    
    MvCmd = 'mv {1} {2}; mv {3} {1}; mv {2} {3}'.format(ServerName, PathName, TmpPath, StripLastSlash(StagedPath))
    SshCmd = ['ssh', '-t', ServerName, MvCmd]
    if (GetVerboseLevel() > 1): print "\tSsh command: {0}". format(SshCmd)
    
    childproc = subprocess.Popen(SshCmd, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    childproc.communicate()
    Result = childproc.returncode
    
    if (Result != 0):
        print "\tError: Failed to swap staged and destination directories!"
        g_ErrorCount += 1
        return False
    
    if (GetVerboseLevel() > 0): print "\tOriginal destination stored at {0}...".format(StagedPath)
    return True


def DoOneDeployStaged(destination):
    global g_DeployCount
    global g_DeployDestCount
    
    ServerName = ExtractServerName(destination)
    
    if (IsLocalOnly()):
        if (not MatchServerName(g_HostName, ServerName)):
            if (GetVerboseLevel() > 0): print "Skipping deployment to {0}.".format(destination)
            return True
    elif (IsServerOnly()):
        if (not MatchServerName(g_InputOptions.serveronly, ServerName)):
            if (GetVerboseLevel() > 0): print "Skipping deployment to {0}.".format(destination)
            return True
    
    print "Deploying to '{0}'...".format(destination)
    
    if (CompareSourceDestPaths(g_SourcePath, destination)):
        print "\tWarning: The source and destination paths are the same...skipping deployment!"
        return True
    
    if (not CreateBackupPath(ServerName, GetBackupPath())):
        DisplayError(destination, "\tError creating the temporary path for staged deployment!")
        return False
    
    StagedPath = GetBackupPath()
    StagedPath += "{0}_{1}_{2}/".format(GetDeployParamValue("name"), ExtractServerName(destination), datetime.datetime.now().strftime("%Y%m%d%H%M%S"))
    
    if (ServerName):
        FullStagedPath = ServerName + ':' + StagedPath
    else:
        FullStagedPath = StagedPath

    g_DeployCount += 1
    
    if (not CopyStagedFiles(destination, StagedPath)):
        DisplayError(destination, "\tError copying files to staged directory!")
        return False

    if (not DeployFiles(FullStagedPath)):
        DisplayError(destination, "\tError copying files with rsync...aborting deployment!")
        return False
    
    if (not CreatePaths(FullStagedPath)):
        DisplayError(destination, "\tError creating paths...aborting deployment!")
        return False
    
    if (not DeployManualCopy(FullStagedPath)):
        DisplayError(destination, "\tError manually copying specific files...aborting deployment!")
        return False

    if (not DeployDeleteFiles(FullStagedPath)):
        DisplayError(destination, "\tError deleting files from deployment path!")
        return False
    
    if (not ChangeDestOwnership(FullStagedPath)):
        DisplayError(destination, "Error changing ownership of destination files...aborting deployment!")
        return False
    
    if (not ChangeDestPermission(FullStagedPath)):
        DisplayError(destination, "Error changing permissions of destination files...aborting deployment!")
        return False
    
    if (not AddLinesDest(FullStagedPath)):
        DisplayError(destination, "Error adding lines to destination files...aborting deployment!")
        return False
    
    if (not SwitchStagedDeploy(destination, StagedPath)):
        print "\tCRITICAL: Failed to swap staging path with destination...things may be broken!"
        return False
    
    AddDeployLog(destination)
    print "\tSuccessfully completed deployment!"
    g_DeployDestCount += 1

    return True


def DoOneDeploy(destination):
    global g_DeployCount
    global g_DeployDestCount
    
    ServerName = ExtractServerName(destination)
    
    if (IsLocalOnly()):
        if (not MatchServerName(g_HostName, ServerName)):
            if (GetVerboseLevel() > 0): print "Skipping deployment to {0}.".format(destination)
            return True
    elif (IsServerOnly()):
        if (not MatchServerName(g_InputOptions.serveronly, ServerName)):
            if (GetVerboseLevel() > 0): print "Skipping deployment to {0}.".format(destination)
            return True
    
    print "Deploying to '{0}'...".format(destination)
    
    if (CompareSourceDestPaths(g_SourcePath, destination)):
        print "\tWarning: The source and destination paths are the same...skipping deployment!"
        return True

    g_DeployCount += 1

    if (IsBackup()):
        if (not CreateBackup(destination)):
            DisplayError(destination, "\tError: Backup failed...aborting deployment!")
            return False

    if (not DeployFiles(destination)):
        DisplayError(destination, "\tError copying files with rsync...aborting deployment!")
        return False
    
    if (not CreatePaths(destination)):
        DisplayError(destination, "\tError creating paths...aborting deployment!")
        return False
    
    if (not DeployManualCopy(destination)):
        DisplayError(destination, "\tError manually copying specific files...aborting deployment!")
        return False

    if (not DeployDeleteFiles(destination)):
        DisplayError(destination, "\tError deleting files from deployment path!")
        return False
    
    if (not ChangeDestOwnership(destination)):
        DisplayError(destination, "Error changing ownership of destination files...aborting deployment!")
        return False
    
    if (not ChangeDestPermission(destination)):
        DisplayError(destination, "Error changing permissions of destination files...aborting deployment!")
        return False
    
    if (not AddLinesDest(destination)):
        DisplayError(destination, "Error adding lines to destination files...aborting deployment!")
        return False

    AddDeployLog(destination)
    print "\tSuccessfully completed deployment!"
    g_DeployDestCount += 1

    return True


def RunDeployFile(deployValue):
    global g_DeployFileCount
    global g_ErrorCount
    
    TmpSplit = deployValue.split(':', 1)
    
    if (len(TmpSplit) == 1): 
        DisplayError("", "Invalid 'deployfile' value '{0}' found!".format(deployValue))
        g_ErrorCount += 1
        return False
    
    deployName = TmpSplit[0].strip().lower()
    
    if (len(g_DeployName) > 0 and g_DeployName != deployName):
        if (GetVerboseLevel() > 0): print "Skipping deployment '{0}'...".format(deployName)
        return True
    
    deployFile = TmpSplit[1].strip()
    if (deployFile.endswith('/')): deployFile += 'uesp.deploy'
    if (deployFile.startswith('/')): deployFile = deployFile[1:]
    deployFile = g_SourcePath + deployFile
    
    if (os.path.samefile(g_InputOptions.deployfile, deployFile)):
        DisplayError("", "Recursive use of deploy file {0} found...skipping!".format(deployFile))
        g_ErrorCount += 1 
        return False
    
    (deployPath, filename) = os.path.split(deployFile);
    if (not deployPath.endswith('/')): deployPath += '/'
    
    deployFile = os.path.realpath(deployFile)
    deployPath = os.path.realpath(deployPath)
    
    print "Trying to run deployment '{0}' from file '{1}' in path '{2}'...".format(deployName, deployFile, deployPath)
    
    DeployCmd = [ os.path.realpath(__file__) ];
    DeployCmd.extend(sys.argv[1:]);
    
    if ('-f' in DeployCmd):
        index = DeployCmd.index('-f')
        del DeployCmd[index:index+2]
        
    if ('--file' in DeployCmd):
        index = DeployCmd.index('--file')
        del DeployCmd[index:index+2]
    
    if ('-s' in DeployCmd):
        index = DeployCmd.index('-s')
        del DeployCmd[index:index+2]
        
    if ('--source' in DeployCmd):
        index = DeployCmd.index('--source')
        del DeployCmd[index:index+2]
        
    DeployCmd.append('-f');
    DeployCmd.append(deployFile);
    # DeployCmd.append('-s');
    # DeployCmd.append(deployPath);
    
    CurrentPath = os.getcwd()
    os.chdir(deployPath)
    
    Result = subprocess.call(DeployCmd)
    
    os.chdir(CurrentPath)
    if (Result != 0): return False
    
    g_DeployFileCount += 1
    print "\tSuccessfully ran deploy file {0}!".format(deployFile)
    return True


def DoDeploy():
    global g_ErrorCount
    global g_WarningCount
    
    CurrentPath = os.getcwd()
    os.chdir(g_SourcePath)
    
    if (not ChangeSourceOwnership()):
        DisplayError("", "Error changing ownership of source files...aborting deployment!")
        os.chdir(CurrentPath)
        return False
    
    if (not ChangeSourcePermission()):
        DisplayError("", "Error changing permissions of source files...aborting deployment!")
        os.chdir(CurrentPath)
        return False
    
    os.chdir(CurrentPath)
    
    if (g_InputOptions.destination):
        if (IsStaged()): return DoOneDeployStaged(g_InputOptions.destination)
        return DoOneDeploy(g_InputOptions.destination)

    AllDests = GetDeployParam("dest")
    AllDeployFiles = GetDeployParam("deployfile")

    if (len(AllDests) == 0 and len(AllDeployFiles) == 0):
        print "Error: No deployment destinations specified!"
        g_ErrorCount += 1
        return False

    for destination in AllDests:
        if (len(destination) > 1):
            if (IsStaged()):
                Result = DoOneDeployStaged(destination[1])
            else:
                Result = DoOneDeploy(destination[1])
            if (not Result): return False
    
    for deployfile in AllDeployFiles:
        if (len(deployfile) > 1):
            RunDeployFile(deployfile[1])
    
    if (len(AllDeployFiles) > 0): return True
    
    if (IsLocalOnly() and g_DeployCount == 0):
        print "Warning: No deployment occurred as localhost was not found in deploy file '{0}'!".format(g_InputOptions.deployfile)
        g_WarningCount += 1
    elif (IsServerOnly() and g_DeployCount == 0):
        print "Warning: No deployment occurred as {1} was not found in deploy file '{0}'!".format(g_InputOptions.deployfile, g_InputOptions.serveronly)
        g_WarningCount += 1
   
    return True


#
# Begin Main Program
#
(g_InputOptions, g_InputArgs) = ParseInputArgs()
LoadDeployFile(g_InputOptions.deployfile)

if (len(g_InputArgs)) > 0:
    g_DeployName = g_InputArgs[0].lower()
    if (GetVerboseLevel() > 0): print "Running deployment just for '{0}'...".format(g_DeployName)

if (GetVerboseLevel()):
    print "Local hostname is '{0}'".format(GetHostName())

LoadSecrets()
InitDatabase()

g_HostName = GetHostName()
g_SourcePath = GetSourcePath()
print "Installing from local path '{0}' ({1})...".format(g_SourcePath, os.path.realpath(g_SourcePath))

g_RevisionNumber = GetRevisionNumber()

DoDeploy()

CloseDatabase()

if (g_ErrorCount == 0):
    print "SUCCESS: Deployed to {2} destinations with {0} errors and {1} warnings!".format(g_ErrorCount, g_WarningCount, g_DeployDestCount)
    exit(0)
else:
    print "FAILED: Deployed to {2} destinations {0} errors and {1} warnings!".format(g_ErrorCount, g_WarningCount, g_DeployDestCount)
    exit(1)
    
    